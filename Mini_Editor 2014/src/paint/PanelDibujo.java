/*
 * PanelDibujo.java
 *
 * Created on 7 de abril de 2008, 10:01 PM
 */

package paint;

import java.awt.*;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.File;
import java.io.Serializable;
import java.util.Vector;
import javax.imageio.ImageIO;
/**
 *
 * @author  oocf
 */
public class PanelDibujo extends javax.swing.JPanel implements Serializable {
    
    int linea=0;
    int lapiz=1;
    int circulo=0;
    int rectangulo=0;
    int rectanguloRed=0;

    Color fondo=new Color(255,255,255),seleccion=new Color(0,0,0);
    int x1,x2,y1,y2;
    Vector<listadoPintura> lista = new Vector<listadoPintura>();
    listadoPintura aux = null;
    BufferedImage backingImage=null;
    boolean relleno=false;

    /** Creates new form PanelDibujo */
    public PanelDibujo() {
        initComponents();
        this.setBackground(fondo);
        frmColor.pack();
    }

   
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frmColor = new javax.swing.JFrame();
        selecColor = new javax.swing.JColorChooser();
        btnAceptar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();

        frmColor.getContentPane().setLayout(null);
        frmColor.getContentPane().add(selecColor);
        selecColor.setBounds(10, 0, 615, 328);

        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });
        frmColor.getContentPane().add(btnAceptar);
        btnAceptar.setBounds(80, 350, 90, 23);

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        frmColor.getContentPane().add(btnCancelar);
        btnCancelar.setBounds(210, 350, 90, 23);

        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                formFocusLost(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 553, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 410, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleName("Pizarra");
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked

    /*
        Verifica en que posición se presionó por vez primera el ratón
     * para tomar las coordenadas iniciales...
     */
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        x1=evt.getX();
        y1=evt.getY();
    }//GEN-LAST:event_formMousePressed

    /*
        Verifica en que posición se soltó el ratón
     * para tomar las coordenadas finales... y
     * en ese momento dibuja el objeto en cuestión
     */
    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        x2=evt.getX();
        y2=evt.getY();

        if(linea==1){
            aux =new listadoPintura(x1,x2,y1,y2,seleccion,0);
        }else if(circulo==1){
            int agrega=1;
            if(relleno)
                agrega=3;
            else
                agrega=1;

            if(x1>x2 || y1>y2)
                aux =new listadoPintura(x2,x1,y2,y1,seleccion,agrega);
            else
                aux =new listadoPintura(x1,x2,y1,y2,seleccion,agrega);
        }
        else if (rectangulo==1){
            int agrega=4;
            if(relleno)
                agrega=5;
            else
                agrega=4;

            if(x1>x2 || y1>y2)
                aux =new listadoPintura(x2,x1,y2,y1,seleccion,agrega);
            else
                aux =new listadoPintura(x1,x2,y1,y2,seleccion,agrega);          
        }
        else if (rectanguloRed==1){
            int agrega=6;
            if(relleno)
                agrega=7;
            else
                agrega=6;

            if(x1>x2 || y1>y2)
                aux =new listadoPintura(x2,x1,y2,y1,seleccion,agrega);
            else
                aux =new listadoPintura(x1,x2,y1,y2,seleccion,agrega);
        }

        else if(lapiz==1){
            aux =new listadoPintura(x1,x2,y1,y2,seleccion,2);
        }
        lista.add(aux);
    }//GEN-LAST:event_formMouseReleased

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        x2=evt.getX();
        y2=evt.getY();
        if(lapiz==1){
            listadoPintura a=new listadoPintura(x1,x2,y1,y2,seleccion,2);
            x1=x2;
            y1=y2;
            lista.add(a);
        }
        repaint();
    }//GEN-LAST:event_formMouseDragged

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        seleccion=selecColor.getColor();
        frmColor.setVisible(false);
}//GEN-LAST:event_btnAceptarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        frmColor.setVisible(false);

    }//GEN-LAST:event_btnCancelarActionPerformed

    private void formFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusLost
   
    }//GEN-LAST:event_formFocusLost

    public RenderedImage getImage() {
        int width = Math.min(getWidth(), 1600);
        int height = Math.min(getHeight(),1200);
        backingImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        Graphics g = backingImage.createGraphics();
        g.setColor(fondo);
        g.fillRect(0, 0, width, height);
        volverADibujar(g);
        g.dispose();
        return backingImage;
    }    

    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        volverADibujar(g);
        this.setBackground(fondo);
        g.setColor(seleccion);
        if(linea==1){
            g.drawLine( x1, y1, x2,y2);
        }else if(circulo==1){
            if(relleno){
                if(x1>x2 || y1>y2)
                    g.fillOval(x2, y2, x1-x2,y1-y2);
                else
                    g.fillOval(x1,y1, x2-x1, y2-y1);
            }else{
                if(x1>x2 || y1>y2)
                    g.drawOval(x2, y2, x1-x2,y1-y2);
                else
                    g.drawOval(x1,y1, x2-x1, y2-y1);
            }
        }
        else if (rectangulo==1){
            if(relleno){
                if(x1>x2 || y1>y2)
                    g.fillRect(x1, y1, x1-x2,y1-y2);
                else
                    g.fillRect(x1, y1, x2-x1,y2-y1);
            }else{
                if(x1>x2 || y1>y2)
                    g.drawRect(x2, y2, x1-x2,y1-y2);
                else
                    g.drawRect(x1,y1, x2-x1, y2-y1);
            }
        }
        else if (rectanguloRed==1){
            if(relleno){
                if(x1>x2 || y1>y2)
                    g.fillRoundRect(x1, y1, x1-x2,y1-y2,5,5);
                else
                    g.fillRoundRect(x1, y1, x2-x1,y2-y1,5,5);
            }else{
                if(x1>x2 || y1>y2)
                    g.drawRoundRect(x2, y2, x1-x2,y1-y2,5,5);
                else
                    g.drawRoundRect(x1,y1, x2-x1, y2-y1,5,5);
            }
        }
        else if(lapiz==1){
            g.drawLine(x1, y1, x2,y2);
        }
        
    }
    
  /*  @Override
    public void paint (Graphics g){
        paintComponent(g);
    }*/
    
    private void volverADibujar(Graphics g){
        if(lista.size()>0){
            for (int i = 0; i < lista.size(); i++) {
                listadoPintura var=lista.get(i);
                g.setColor(var.color);

                //Cuando el tipo es 0 se dibujan lineas rectas
                if(var.tipo==0){
                    g.drawLine(var.xInicial, var.yInicial,var.xFinal,var.yFinal);
                    
                }
                //Cuando el tipo es 1 se diseñar la elipse vacía
                else if(var.tipo==1){
                    if(var.xInicial>var.xFinal || var.yInicial>var.yFinal)
                        g.drawOval(var.xFinal, var.yFinal,var.xInicial-var.xFinal,var.yInicial-var.yFinal);
                    else
                        g.drawOval(var.xInicial, var.yInicial,var.xFinal-var.xInicial,var.yFinal-var.yInicial);
                }else if(var.tipo==2){
                    g.drawLine(var.xInicial, var.yInicial,var.xFinal,var.yFinal);
               //Cuando el tipo es 3 se diseñar la elipse rellena
                }else if(var.tipo==3){
                    if(var.xInicial>var.xFinal || var.yInicial>var.yFinal)
                        g.fillOval(var.xFinal, var.yFinal,var.xInicial-var.xFinal,var.yInicial-var.yFinal);
                    else
                        g.fillOval(var.xInicial, var.yInicial,var.xFinal-var.xInicial,var.yFinal-var.yInicial);
                }
                //Cuando el tipo es 4 se diseñar el rectángulo vacío
                else if(var.tipo==4){
                    if(var.xInicial>var.xFinal || var.yInicial>var.yFinal)
                        g.drawRect(var.xFinal, var.yFinal,var.xInicial- var.xFinal,var.yInicial-var.yFinal);
                    else
                        g.drawRect(var.xInicial, var.yInicial,var.xFinal-var.xInicial,var.yFinal-var.yInicial);
                }                
                //Cuando el tipo es 5 se diseñar el rectángulo relleno
                else if(var.tipo==5){
                    if(var.xInicial>var.xFinal || var.yInicial>var.yFinal)
                        g.fillRect(var.xFinal, var.yFinal,var.xInicial- var.xFinal,var.yInicial-var.yFinal);
                    else
                        g.fillRect(var.xInicial, var.yInicial,var.xFinal-var.xInicial,var.yFinal-var.yInicial);
                }
                //Cuando el tipo es 6 se diseñar el rectángulo  redondeado vacío
                else if(var.tipo==6){
                    if(var.xInicial>var.xFinal || var.yInicial>var.yFinal)
                        g.drawRoundRect(var.xFinal, var.yFinal,var.xInicial- var.xFinal,var.yInicial-var.yFinal,5,5);
                    else
                        g.drawRoundRect(var.xInicial, var.yInicial,var.xFinal-var.xInicial,var.yFinal-var.yInicial,5,5);
                }
                //Cuando el tipo es 5 se diseñar el rectángulo redondeado relleno
                else if(var.tipo==7){
                    if(var.xInicial>var.xFinal || var.yInicial>var.yFinal)
                        g.fillRoundRect(var.xFinal, var.yFinal,var.xInicial- var.xFinal,var.yInicial-var.yFinal,5,5);
                    else
                        g.fillRoundRect(var.xInicial, var.yInicial,var.xFinal-var.xInicial,var.yFinal-var.yInicial,5,5);
                }

            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JFrame frmColor;
    private javax.swing.JColorChooser selecColor;
    // End of variables declaration//GEN-END:variables

    void setIcon() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
}
